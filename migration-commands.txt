================================================================================
RAILWAY MOTZZ LABORATORY DATA MIGRATION
================================================================================
Motzz Laboratory Data Structure:
- 4 Main Categories
- 5 Agriculture Subcategories
- 9 Total Tests

================================================================================
RAILWAY CLI MIGRATION COMMANDS
================================================================================

1. First, login to Railway:
   railway login

2. Clear existing test data:

railway run node -e "
const { Category, Test } = require('./server/models');
(async () => {
  try {
    await Test.destroy({ where: {} });
    await Category.destroy({ where: {} });
    console.log('✅ Cleared existing categories and tests');
    process.exit(0);
  } catch (error) {
    console.error('❌ Error clearing data:', error.message);
    process.exit(1);
  }
})();
"

3. Create main categories:

railway run node -e "
const { Category } = require('./server/models');
Category.findOrCreate({
  where: { name: 'Agriculture' },
  defaults: {
    name: 'Agriculture',
    description: 'Testing services for soil, plant, water, compost/mulch and fertilizer. We provide services to farms, golf courses, and nurseries in Arizona and surrounding regions.',
    imageUrl: '/images/categories/agriculture.jpg',
    isActive: true,
    displayOrder: 1
  }
}).then(([category, created]) => {
  console.log('Agriculture:', created ? 'Created' : 'Already exists');
  process.exit(0);
}).catch(err => {
  console.error('Error:', err.message);
  process.exit(1);
});
"

railway run node -e "
const { Category } = require('./server/models');
Category.findOrCreate({
  where: { name: 'Construction / Materials' },
  defaults: {
    name: 'Construction / Materials',
    description: 'With our engineering background, we perform soil aggregate testing using the ADOT, CDOT, AASHTO and ASTM specified methods.',
    imageUrl: '/images/categories/construction-materials.jpg',
    isActive: true,
    displayOrder: 2
  }
}).then(([category, created]) => {
  console.log('Construction / Materials:', created ? 'Created' : 'Already exists');
  process.exit(0);
}).catch(err => {
  console.error('Error:', err.message);
  process.exit(1);
});
"

railway run node -e "
const { Category } = require('./server/models');
Category.findOrCreate({
  where: { name: 'Environmental Analysis' },
  defaults: {
    name: 'Environmental Analysis',
    description: 'Detailed analysis of environmental samples including water, soil, and air quality testing.',
    imageUrl: '/images/categories/environmental-analysis.jpg',
    isActive: true,
    displayOrder: 3
  }
}).then(([category, created]) => {
  console.log('Environmental Analysis:', created ? 'Created' : 'Already exists');
  process.exit(0);
}).catch(err => {
  console.error('Error:', err.message);
  process.exit(1);
});
"

railway run node -e "
const { Category } = require('./server/models');
Category.findOrCreate({
  where: { name: 'Microbiology' },
  defaults: {
    name: 'Microbiology',
    description: 'Identification and analysis of microorganisms in various samples.',
    imageUrl: '/images/categories/microbiology.jpg',
    isActive: true,
    displayOrder: 4
  }
}).then(([category, created]) => {
  console.log('Microbiology:', created ? 'Created' : 'Already exists');
  process.exit(0);
}).catch(err => {
  console.error('Error:', err.message);
  process.exit(1);
});
"

4. Create agriculture subcategories:

railway run node -e "
const { Category } = require('./server/models');
(async () => {
  try {
    const parent = await Category.findOne({ where: { name: 'Agriculture' } });
    if (!parent) throw new Error('Parent category not found');
    const [category, created] = await Category.findOrCreate({
      where: { name: 'Soil Analysis', parentId: parent.id },
      defaults: {
        name: 'Soil Analysis',
        description: 'Comprehensive soil testing services for agricultural and environmental applications.',
        imageUrl: '/images/categories/soil-analysis.jpg',
        isActive: true,
        displayOrder: 1,
        parentId: parent.id
      }
    });
    console.log('Soil Analysis:', created ? 'Created' : 'Already exists');
    process.exit(0);
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
})();
"

railway run node -e "
const { Category } = require('./server/models');
(async () => {
  try {
    const parent = await Category.findOne({ where: { name: 'Agriculture' } });
    if (!parent) throw new Error('Parent category not found');
    const [category, created] = await Category.findOrCreate({
      where: { name: 'Plant/Tissue Analysis', parentId: parent.id },
      defaults: {
        name: 'Plant/Tissue Analysis',
        description: 'Plant/Tissue, Petiole Analysis for crop health and nutritional assessment.',
        imageUrl: '/images/categories/plant-tissue-analysis.jpg',
        isActive: true,
        displayOrder: 2,
        parentId: parent.id
      }
    });
    console.log('Plant/Tissue Analysis:', created ? 'Created' : 'Already exists');
    process.exit(0);
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
})();
"

railway run node -e "
const { Category } = require('./server/models');
(async () => {
  try {
    const parent = await Category.findOne({ where: { name: 'Agriculture' } });
    if (!parent) throw new Error('Parent category not found');
    const [category, created] = await Category.findOrCreate({
      where: { name: 'Water Analysis', parentId: parent.id },
      defaults: {
        name: 'Water Analysis',
        description: 'Water quality testing for irrigation and agricultural use.',
        imageUrl: '/images/categories/water-analysis.jpg',
        isActive: true,
        displayOrder: 3,
        parentId: parent.id
      }
    });
    console.log('Water Analysis:', created ? 'Created' : 'Already exists');
    process.exit(0);
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
})();
"

railway run node -e "
const { Category } = require('./server/models');
(async () => {
  try {
    const parent = await Category.findOne({ where: { name: 'Agriculture' } });
    if (!parent) throw new Error('Parent category not found');
    const [category, created] = await Category.findOrCreate({
      where: { name: 'Compost Analysis', parentId: parent.id },
      defaults: {
        name: 'Compost Analysis',
        description: 'Testing services for compost and organic soil amendments.',
        imageUrl: '/images/categories/compost-analysis.jpg',
        isActive: true,
        displayOrder: 4,
        parentId: parent.id
      }
    });
    console.log('Compost Analysis:', created ? 'Created' : 'Already exists');
    process.exit(0);
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
})();
"

railway run node -e "
const { Category } = require('./server/models');
(async () => {
  try {
    const parent = await Category.findOne({ where: { name: 'Agriculture' } });
    if (!parent) throw new Error('Parent category not found');
    const [category, created] = await Category.findOrCreate({
      where: { name: 'Fertilizer Analysis', parentId: parent.id },
      defaults: {
        name: 'Fertilizer Analysis',
        description: 'Analysis of fertilizer composition and quality.',
        imageUrl: '/images/categories/fertilizer-analysis.jpg',
        isActive: true,
        displayOrder: 5,
        parentId: parent.id
      }
    });
    console.log('Fertilizer Analysis:', created ? 'Created' : 'Already exists');
    process.exit(0);
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
})();
"

5. Create soil analysis tests:

railway run node -e "
const { Category, Test } = require('./server/models');
(async () => {
  try {
    const category = await Category.findOne({ where: { name: 'Soil Analysis' } });
    if (!category) throw new Error('Category not found');
    const [testRecord, created] = await Test.findOrCreate({
      where: { name: 'Complete Soil Analysis', categoryId: category.id },
      defaults: {
        name: 'Complete Soil Analysis',
        description: 'Comprehensive soil analysis including pH, Electrical Conductivity (EC), Calcium (Ca), Magnesium (Mg), Sodium (Na), Potassium(K), Zinc (Zn), Iron (Fe), Manganese (Mn), Copper (Cu), Nickel (Ni), Nitrate-N (NO3-N), Phosphate-P (PO4-P), Sulfate-S (SO4-S), Boron (B), Free Lime, ESP (Calc), CEC (Calc)',
        price: 175,
        turnaroundTime: '3-5 business days',
        methodReference: 'Standard soil testing methods',
        isActive: true,
        displayOrder: 1,
        categoryId: category.id
      }
    });
    console.log('Complete Soil Analysis: $175:', created ? 'Created' : 'Already exists');
    process.exit(0);
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
})();
"

railway run node -e "
const { Category, Test } = require('./server/models');
(async () => {
  try {
    const category = await Category.findOne({ where: { name: 'Soil Analysis' } });
    if (!category) throw new Error('Category not found');
    const [testRecord, created] = await Test.findOrCreate({
      where: { name: 'Organic Matter - LOI', categoryId: category.id },
      defaults: {
        name: 'Organic Matter - LOI',
        description: 'Organic Matter content analysis using Loss on Ignition method',
        price: 45,
        turnaroundTime: '2-3 business days',
        methodReference: 'LOI Method',
        isActive: true,
        displayOrder: 2,
        categoryId: category.id
      }
    });
    console.log('Organic Matter - LOI: $45:', created ? 'Created' : 'Already exists');
    process.exit(0);
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
})();
"

railway run node -e "
const { Category, Test } = require('./server/models');
(async () => {
  try {
    const category = await Category.findOne({ where: { name: 'Soil Analysis' } });
    if (!category) throw new Error('Category not found');
    const [testRecord, created] = await Test.findOrCreate({
      where: { name: 'Soil pH and EC', categoryId: category.id },
      defaults: {
        name: 'Soil pH and EC',
        description: 'Basic soil pH and Electrical Conductivity test',
        price: 35,
        turnaroundTime: '1-2 business days',
        methodReference: 'Standard Methods',
        isActive: true,
        displayOrder: 3,
        categoryId: category.id
      }
    });
    console.log('Soil pH and EC: $35:', created ? 'Created' : 'Already exists');
    process.exit(0);
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
})();
"

6. Create construction/materials tests:

railway run node -e "
const { Category, Test } = require('./server/models');
(async () => {
  try {
    const category = await Category.findOne({ where: { name: 'Construction / Materials' } });
    if (!category) throw new Error('Category not found');
    const [testRecord, created] = await Test.findOrCreate({
      where: { name: 'Soil Aggregate Testing', categoryId: category.id },
      defaults: {
        name: 'Soil Aggregate Testing',
        description: 'Soil aggregate testing using ADOT, CDOT, AASHTO and ASTM specified methods',
        price: 195,
        turnaroundTime: '5-7 business days',
        methodReference: 'ASTM/AASHTO Standards',
        isActive: true,
        displayOrder: 1,
        categoryId: category.id
      }
    });
    console.log('Soil Aggregate Testing: $195:', created ? 'Created' : 'Already exists');
    process.exit(0);
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
})();
"

railway run node -e "
const { Category, Test } = require('./server/models');
(async () => {
  try {
    const category = await Category.findOne({ where: { name: 'Construction / Materials' } });
    if (!category) throw new Error('Category not found');
    const [testRecord, created] = await Test.findOrCreate({
      where: { name: 'Construction Materials Analysis', categoryId: category.id },
      defaults: {
        name: 'Construction Materials Analysis',
        description: 'Testing of construction materials for quality control and compliance',
        price: 225,
        turnaroundTime: '5-7 business days',
        methodReference: 'Industry Standards',
        isActive: true,
        displayOrder: 2,
        categoryId: category.id
      }
    });
    console.log('Construction Materials Analysis: $225:', created ? 'Created' : 'Already exists');
    process.exit(0);
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
})();
"

7. Create environmental analysis tests:

railway run node -e "
const { Category, Test } = require('./server/models');
(async () => {
  try {
    const category = await Category.findOne({ where: { name: 'Environmental Analysis' } });
    if (!category) throw new Error('Category not found');
    const [testRecord, created] = await Test.findOrCreate({
      where: { name: 'Water Quality Analysis', categoryId: category.id },
      defaults: {
        name: 'Water Quality Analysis',
        description: 'Comprehensive water quality testing for environmental monitoring',
        price: 150,
        turnaroundTime: '3-5 business days',
        methodReference: 'EPA Methods',
        isActive: true,
        displayOrder: 1,
        categoryId: category.id
      }
    });
    console.log('Water Quality Analysis: $150:', created ? 'Created' : 'Already exists');
    process.exit(0);
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
})();
"

railway run node -e "
const { Category, Test } = require('./server/models');
(async () => {
  try {
    const category = await Category.findOne({ where: { name: 'Environmental Analysis' } });
    if (!category) throw new Error('Category not found');
    const [testRecord, created] = await Test.findOrCreate({
      where: { name: 'Soil Contamination Assessment', categoryId: category.id },
      defaults: {
        name: 'Soil Contamination Assessment',
        description: 'Testing for environmental contaminants in soil samples',
        price: 185,
        turnaroundTime: '5-7 business days',
        methodReference: 'EPA Standards',
        isActive: true,
        displayOrder: 2,
        categoryId: category.id
      }
    });
    console.log('Soil Contamination Assessment: $185:', created ? 'Created' : 'Already exists');
    process.exit(0);
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
})();
"

8. Create microbiology tests:

railway run node -e "
const { Category, Test } = require('./server/models');
(async () => {
  try {
    const category = await Category.findOne({ where: { name: 'Microbiology' } });
    if (!category) throw new Error('Category not found');
    const [testRecord, created] = await Test.findOrCreate({
      where: { name: 'Microbial Identification', categoryId: category.id },
      defaults: {
        name: 'Microbial Identification',
        description: 'Identification and characterization of microorganisms',
        price: 125,
        turnaroundTime: '3-5 business days',
        methodReference: 'Standard Microbiological Methods',
        isActive: true,
        displayOrder: 1,
        categoryId: category.id
      }
    });
    console.log('Microbial Identification: $125:', created ? 'Created' : 'Already exists');
    process.exit(0);
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
})();
"

railway run node -e "
const { Category, Test } = require('./server/models');
(async () => {
  try {
    const category = await Category.findOne({ where: { name: 'Microbiology' } });
    if (!category) throw new Error('Category not found');
    const [testRecord, created] = await Test.findOrCreate({
      where: { name: 'Pathogen Detection', categoryId: category.id },
      defaults: {
        name: 'Pathogen Detection',
        description: 'Detection of pathogenic microorganisms in samples',
        price: 165,
        turnaroundTime: '5-7 business days',
        methodReference: 'FDA/USDA Methods',
        isActive: true,
        displayOrder: 2,
        categoryId: category.id
      }
    });
    console.log('Pathogen Detection: $165:', created ? 'Created' : 'Already exists');
    process.exit(0);
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
})();
"

9. Verify migration:

railway run node -e "
const { Category, Test } = require('./server/models');
(async () => {
  try {
    const categories = await Category.findAll({ include: [{ model: Test, as: 'tests' }] });
    console.log(`✅ Migration Complete: ${categories.length} categories`);
    categories.forEach(cat => {
      console.log(`- ${cat.name}: ${cat.tests ? cat.tests.length : 0} tests`);
    });
    process.exit(0);
  } catch (error) {
    console.error('❌ Error verifying:', error.message);
    process.exit(1);
  }
})();
"

================================================================================
MIGRATION SUMMARY
================================================================================

This migration will create:
✅ 4 Main Categories (Agriculture, Construction/Materials, Environmental, Microbiology)
✅ 5 Agriculture Subcategories (Soil, Plant/Tissue, Water, Compost, Fertilizer)
✅ 9 Professional Tests with pricing ($35-$225)
✅ Complete hierarchical category structure
✅ All original Motzz Laboratory data

After running these commands, your Railway database will have all the
professional analytical testing data instead of the test categories.

================================================================================
