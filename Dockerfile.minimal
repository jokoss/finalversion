# Minimal Dockerfile for troubleshooting Render deployment issues
FROM node:18-alpine

# Install dumb-init for proper signal handling and bash for scripts
RUN apk add --no-cache dumb-init bash curl

# Create app directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY client/package*.json ./client/
COPY server/package*.json ./server/

# Create directories if they don't exist
RUN mkdir -p server client client/build uploads data

# Copy diagnostic and troubleshooting scripts
COPY healthcheck.js ./
COPY minimal-server.js ./
COPY render-setup-minimal.sh ./
COPY ensure-server-files.sh ./

# Copy server files
COPY server ./server/

# Copy client build files
COPY client/build ./client/build/

# Install dependencies
RUN npm install express cors dotenv

# Add environment variables for debugging
ENV DEBUG=express:*,app:*
ENV NODE_DEBUG=http,net,stream
ENV NODE_ENV=production

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start with healthcheck, then minimal server
ENTRYPOINT ["dumb-init", "--"]
CMD ["/bin/sh", "-c", "node healthcheck.js && node minimal-server.js"]
